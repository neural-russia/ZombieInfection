import os
import json
import hashlib
from PIL import Image

# --------------- –ù–ê–°–¢–†–û–ô–ö–ò ---------------
JSON_PATH = "capture_0001.json"
SPRITES_DIR = "sprites"
OUTPUT_DIR = "frames"
GIF_PATH = "capture_0001.gif"

os.makedirs(OUTPUT_DIR, exist_ok=True)

# --------------- –•–≠–® ARGB (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Ç–≤–æ–∏–º Java) ---------------
def sha256_java_argb(img: Image.Image) -> str:
    rgba = img.convert("RGBA")
    try:
        raw = rgba.tobytes("raw", "ARGB")
    except Exception:
        buf = bytearray()
        for r, g, b, a in rgba.getdata():
            buf.extend((a, r, g, b))
        raw = bytes(buf)
    return hashlib.sha256(raw).hexdigest()

# --------------- –¢–†–ê–ù–°–§–û–†–ú ---------------

from PIL import Image


def apply_transform(im: Image.Image, name: str) -> Image.Image:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    –¥–ª—è —Å–ª—É—á–∞—è 'MIRROR_ROTATE_180'.
    """
    t = (name or "NONE").upper()

    # --- –ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ –º–µ–Ω—è—é—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã ---
    if t == "NONE":
        return im
    if t in ("FLIP_H", "MIRROR"):
        return im.transpose(Image.FLIP_LEFT_RIGHT)
    if t == "FLIP_V":
        return im.transpose(Image.FLIP_TOP_BOTTOM)
    if t == "ROTATE_180":
        return im.transpose(Image.ROTATE_180)

    # --- –ù–ê–® –°–õ–£–ß–ê–ô: –ù–µ–≤–µ—Ä–Ω–æ –Ω–∞–∑–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è ---
    # –°—É–¥—è –ø–æ –≤–∞—à–µ–º—É —Ç–µ—Å—Ç—É, —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤.
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç —á–µ—Ä–µ–∑ –ø–∞–¥–¥–∏–Ω–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–µ–∑–∫–∏ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è.
    if t == "MIRROR_ROTATE_180":
        w, h = im.size

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ–ª—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–µ–∑–∫–∏
        padding = 2
        side = max(w, h) + padding * 2
        square = Image.new("RGBA", (side, side), (0, 0, 0, 0))
        offset_x = (side - w) // 2
        offset_y = (side - h) // 2
        square.paste(im, (offset_x, offset_y), im)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤ (CCW), –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        rotated_square = square.transpose(Image.ROTATE_90)

        # –í—ã—Ä–µ–∑–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å, –Ω–æ —É–∂–µ —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ (h x w)
        crop_x = (side - h) // 2
        crop_y = (side - w) // 2

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π
        return rotated_square.crop((crop_x, crop_y, crop_x + h, crop_y + w))

    # --- –î—Ä—É–≥–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä—ã ---
    # (–û—Å—Ç–∞–≤–∏–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∏—Ö –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if t in ("ROTATE_90", "ROTATE_270", "MIRROR_ROTATE_90", "MIRROR_ROTATE_270"):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Å –ø–∞–¥–¥–∏–Ω–≥–æ–º,
        # –µ—Å–ª–∏ —ç—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.
        # –ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.
        # –î–ª—è —á–∏—Å—Ç–æ—Ç—ã, –ø—Ä–∏–º–µ–Ω–∏–º —Ç–æ—Ç –∂–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥:

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é Pillow –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
        op = None
        if t == "ROTATE_90":
            op = Image.ROTATE_270  # –í Pillow –æ–Ω–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
        elif t == "ROTATE_270":
            op = Image.ROTATE_90

        if op:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ–ª—Å—Ç
            w, h = im.size
            padding = 2
            side = max(w, h) + padding * 2
            square = Image.new("RGBA", (side, side), (0, 0, 0, 0))
            offset_x = (side - w) // 2
            offset_y = (side - h) // 2
            square.paste(im, (offset_x, offset_y), im)

            rotated_square = square.transpose(op)

            crop_x = (side - h) // 2
            crop_y = (side - w) // 2
            return rotated_square.crop((crop_x, crop_y, crop_x + h, crop_y + w))

    return im






# --------------- –ó–ê–ì–†–£–ó–ö–ê JSON ---------------
with open(JSON_PATH, "r", encoding="utf-8") as f:
    data = json.load(f)

frame_keys = data["meta"]["frame_keys"]
frames = data["frames"]

# --------------- –ò–ù–î–ï–ö–° –ü–û –•–≠–®–£ ---------------
print("üì¶ –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
hash_to_path = {}
for fname in os.listdir(SPRITES_DIR):
    if not fname.lower().endswith((".png", ".jpg", ".jpeg", ".webp")):
        continue
    path = os.path.join(SPRITES_DIR, fname)
    try:
        with Image.open(path) as im:
            digest = sha256_java_argb(im)
            hash_to_path[digest] = path
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {fname}: {e}")
print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {len(hash_to_path)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

# --------------- –°–ë–û–†–ö–ê –û–î–ù–û–ì–û –ö–ê–î–†–ê ---------------
def build_frame(frame_key: str) -> Image.Image:
    frame = frames[frame_key]
    fb = frame["bounds"]
    parts = frame["parts"]

    # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ö–æ–ª—Å—Ç
    canvas = Image.new("RGBA", (fb["width"], fb["height"]), (0, 0, 0, 0))

    for part in sorted(parts, key=lambda p: p["order"]):
        sh = part.get("sprite_hash", {})
        sprite_hash = (sh.get("value") or "").lower()
        if not sprite_hash:
            continue

        sprite_path = hash_to_path.get(sprite_hash)
        if not sprite_path:
            print(f"‚è≠Ô∏è {frame_key}: –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è hash={sprite_hash[:8]}‚Ä¶ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
            continue

        sprite = Image.open(sprite_path).convert("RGBA")

        # 1) crop –∏–∑ source –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞
        src = part["source"]
        crop = sprite.crop((src["x"], src["y"], src["x"] + src["width"], src["y"] + src["height"]))

        # 2) –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
        transform_name = (part.get("transform", {}).get("name") or "NONE")
        transformed_crop = apply_transform(crop, transform_name, 0, 0)  # –†–∞–∑–º–µ—Ä—ã –Ω–µ –≤–∞–∂–Ω—ã

        # 3) –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        dst_w, dst_h = part["size"]["width"], part["size"]["height"]
        if transformed_crop.size != (dst_w, dst_h):
            final_crop = transformed_crop.resize((dst_w, dst_h), Image.NEAREST)
        else:
            final_crop = transformed_crop

        # 4) –ø–æ–∑–∏—Ü–∏—è: absolute_position
        pos_x = int(round(part["absolute_position"]["x"] - fb["x"]))
        pos_y = int(round(part["absolute_position"]["y"] - fb["y"]))

        # 5) –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Å –∞–ª—å—Ñ–æ–π
        canvas.paste(final_crop, (pos_x, pos_y), final_crop)

    return canvas

# --------------- –°–ë–û–†–ö–ê –í–°–ï–• –ö–ê–î–†–û–í ---------------
assembled = []
durations = []
for key in frame_keys:
    print(f"üß© –°–æ–±–∏—Ä–∞–µ–º {key} ‚Ä¶")
    img = build_frame(key)
    img.save(os.path.join(OUTPUT_DIR, f"{key}.png"))
    assembled.append(img)
    durations.append(frames[key].get("duration_ms", 40))  # fallback 40ms

print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {len(assembled)}")

# --------------- –≠–ö–°–ü–û–†–¢ GIF ---------------
if assembled:
    print("üéûÔ∏è –≠–∫—Å–ø–æ—Ä—Ç GIF ‚Ä¶")
    first, *rest = assembled
    # transparency/disposal –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
    first.save(
        GIF_PATH,
        save_all=True,
        append_images=rest,
        duration=durations,
        loop=0,
        disposal=2,      # restore to background
        transparency=0,  # –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏; Pillow —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    )
    print(f"üé¨ GIF —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {GIF_PATH}")
else:
    print("‚ùå –ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
